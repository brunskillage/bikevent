@using Bikevent.Database
@using FluentMigrator.Expressions
@using Humanizer
@using System.Security.Cryptography.X509Certificates
@inject MiscDbService db;

@functions {

    string GetTsType(string inType)
    {
        if (inType.Contains("int"))
            return "number";
        if (inType.StartsWith("varchar"))
            return "string";        
        if (inType.StartsWith("decimal"))
            return "number";
        if (inType.IndexOf("date", StringComparison.OrdinalIgnoreCase) > -1)
            return "Date";
        if (inType.IndexOf("time", StringComparison.OrdinalIgnoreCase) > -1)
            return "Date";

        return "unknown";
    }

    string GetCsType(string inType)
    {
        if (inType.Contains("int"))
            return "int";
        if (inType.StartsWith("varchar"))
            return "string";
        if (inType.IndexOf("date", StringComparison.OrdinalIgnoreCase) > -1)
            return "DateTime";
        if (inType.IndexOf("time", StringComparison.OrdinalIgnoreCase) > -1)
            return "DateTime";
        if (inType.StartsWith("decimal"))
            return "decimal";

        return "unknown";
    }

    string GetApostrophies(string inType, string field)
    {
        if (inType.StartsWith("int"))
            return inType;
    
        return $"@{field}'";
    }

    string FirstCapital(string input)
    {
        return input.Substring(0, 1).ToUpperInvariant() + input.Substring(1);
    }

    string allCsFileContent = "";
    string allTsFileContent = "";
    string allFormHtmlContent = "";

}

<h1>Util Page</h1>
<div id="auto">
    @foreach (var t in await db.GetTableNames())
    {

        // Ts Classes

        var linesTs = new List<string>();
        linesTs.Add($"class {t.Singularize()} {{");
        linesTs.Add("&nbsp;&nbsp;&nbsp;constructor(");

        var meta = (await db.GetTableMeta(t)).ToList();
        @foreach (var m in meta.OrderBy(x => x.Null))
        {
            var nullSign = m.Null == "YES" ? "?" : "";
            var theType = GetTsType(m.Type);
            var lineTs = $"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public {m.Field}{nullSign}: {theType},";
            linesTs.Add(lineTs);
        }
        linesTs.Add("&nbsp;&nbsp;&nbsp;) { }");
        linesTs.Add(" }");
        var allts = string.Join("<br>", linesTs);
        allTsFileContent += "<br><br>" + allts;

        // CS Classes

        var linesCs = new List<string>();


        linesCs.Add($"[Table(\"{t}\")]");
        linesCs.Add($"public class Bv{t.Singularize().Transform(To.TitleCase)}Row");
        linesCs.Add("{");
        linesCs.Add("&nbsp;&nbsp;&nbsp;[Key]");
        linesCs.Add("&nbsp;&nbsp;&nbsp;public int Id {get;set;}");

        @foreach (var m in meta.OrderBy(x => x.Field))
        {
            if (m.Field == "rideId") continue;
            var nullSign = m.Null == "YES" ? "?" : "";
            var theType = GetCsType(m.Type);
            var line = $"&nbsp;&nbsp;&nbsp;public {theType}{nullSign} {FirstCapital(m.Field)} {{get; set;}}";
            linesCs.Add(line);
        }
        linesCs.Add("}");
        var allcs = string.Join("<br>", linesCs);
        allCsFileContent += "<br><br>" + allcs;

@*
        var insertSql = "";
        var iFields = string.Join(", ", meta.Where(m=>m.Field != "rideId").Select(m=> $"{m.Field}"));
        var iVals = string.Join(", ", meta.Where(m=>m.Field != "rideId").Select(m=> $"@{FirstCapital(m.Field)}"));
        insertSql += $"Insert into {t} ({iFields}) values ({iVals});";


      

        var uFields = string.Join(", ", meta.Where(m=>m.Field != "rideId").Select(m=> $"{m.Field} = @{FirstCapital(m.Field)}"));
        
        var updateSql = $"update {t} set ({uFields}) where rideId = @rideId;"; 
        <br/><br/> @updateSql
        
        var deleteSql = $"delete from {t} where rideId = @rideId;"; 
        <br/><br/> @deleteSql
        
        var selectSql = $"select from {t} where rideId = @rideId;"; 
        
        <br/><span>public class @FirstCapital(t)</span>
        <br/><br/> @selectSql
 *@  




    }
    <h1>Typscript</h1>
    @Html.Raw(allTsFileContent)
    <hr/>
    <h1>Csharp</h1>
    @Html.Raw("using Dapper.Contrib.Extensions;" + allCsFileContent)
    
    
@foreach (var t in await db.GetTableNames())
{
     var meta = (await db.GetTableMeta(t)).ToList();
    <div class="form" id="formInputs">
        <h3>Add @t.Humanize().Singularize()</h3>
        @foreach (var m in meta.OrderBy(x => x.Field))
        {
            @Html.Partial("BvPartials/_InputBox", new BvInputModel { DMode = DisplayMode.Edit, Label = m.Field, NameOf = m.Field.Humanize(), PlaceHolder = m.Field, Prompt = m.Field, Error = "" })
            <br/>
        }

        <button id="submitButton">Submit</button>
    </div>

    meta = (await db.GetTableMeta(t)).ToList();
    <div class="form" id="formInputs">
        <h3>Add @t.Humanize().Singularize()</h3>
        @foreach (var m in meta.OrderBy(x => x.Field))
        {
            @Html.Partial("BvPartials/_InputBox", new BvInputModel { DMode = DisplayMode.View, Label = m.Field, NameOf = m.Field.Humanize(), PlaceHolder = m.Field, Prompt = m.Field, Error = "" })
            <br/>
        }

        <button id="submitButton">Submit</button>
    </div>
}
</div>